In the following C++ function, let n >= m.

    int gcd(int n, int m) {
            if (n%m ==0) return m;
            if (n < m) swap(n, m);
            while (m > 0) {
                n = n%m;
                swap(n, m);
            }
            return n;
    }
What is the time complexity of the above function assuming n > m?.
Θ symbol represents theta notation and Ω symbol represents omega notation.

Choose correct answer from below:

A) Θ(logn)
B) Ω(n)
c) Θ(loglogn)
D) Θ(sqrt(n))

Ans: A

Explaination:
Here is the explanation for the code above:
1. If n%m is 0, m is the gcd, hence Θ(1)
2. If n < m, swap them. This takes Θ(1)
3. While m > 0, do the following:
3.1 n = n%m. This takes Θ(1)
3.2 swap(n, m). This takes Θ(1)
3.3 m becomes smaller by 1 each time. This takes Θ(m) time
Hence, the time complexity of the above function is Θ(1+1+1+1+Θ(m)) = Θ(m+4) = Θ(m). 

Now, the function is called gcd(n, m) and n > m. So, we can say that m <= n/2.
Hence, the time complexity of the above function is Θ(m) = Θ(n/2) = Θ(n). 

The time complexity of the above function is Θ(n).